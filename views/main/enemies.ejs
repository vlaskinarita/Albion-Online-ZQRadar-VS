<div class="container px-6 mx-auto grid">
    <div class="grid gap-6 mb-8 md:grid-cols-1 xl:grid-cols-1">
        <div class="mt-4 flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div>
				<h2 class=" text-4xl font-semibold text-gray-600 dark:text-gray-300">
					Enemies
				</h2>
			</div>
		</div>
        <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 ">
			<div>
                <h4 class="mb-4 text-2xl font-semibold text-gray-600 dark:text-gray-300">
                    Classic Enemies
                </h4>
                <label class="flex items-center">
                    <input disabled type="checkbox" id="settingAllEnemies" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">All</span>
                </label>
                <label class="flex items-center">
                    <input disabled type="checkbox" id="settingNormalEnemy" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Normal</span>
                </label>
                <label class="flex items-center">
                    <input disabled type="checkbox" id="settingMediumEnemy" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Medium</span>
                </label>
                <label class="flex items-center">
                    <input disabled type="checkbox" id="settingEnchantedEnemy" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Enchanted</span>
                </label>
                <label class="flex items-center">
                    <input disabled type="checkbox" id="settingMiniBossEnemy" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Mini-Boss</span>
                </label>
                <label class="flex items-center">
                    <input disabled type="checkbox" id="settingBossEnemy" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Boss</span>
                </label>
			</div>
		</div>

        <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 ">
			<div>
                <h4 class="mb-4 text-2xl font-semibold text-gray-600 dark:text-gray-300">
                    Mists
                </h4>
                <label class="flex items-center">
                    <input type="checkbox" id="settingBossCrystalSpider" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Crystal Spider</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="settingBossFairyDragon" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Fairy Dragon</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="settingBossVeilWeaver" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Veil Weaver</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="settingBossGriffin" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Grifin</span>
                </label>
			</div>
		</div>
        <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 ">
			<div>
                <h4 class="mb-4 text-2xl font-semibold text-gray-600 dark:text-gray-300">
                    Other
                </h4>
                <label class="flex items-center">
                    <input type="checkbox" id="settingAvaloneDrones" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Avalone Drones</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="settingShowUnmanagedEnemies" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Show enemies with unmanaged ids?</span>
                </label>
                <label class="flex items-center">
                    <input type="checkbox" id="settingShowEventEnemies" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Event enemies</span>
                </label>
			</div>
		</div>

        <div class="flex items-start p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800 ">
			<div>
                <h4 class="mb-4 text-2xl font-semibold text-gray-600 dark:text-gray-300">
                    Debug
                </h4>
                <label class="flex items-center">
                    <input type="checkbox" id="settingEnemiesHP" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Show Hp</span>
                </label>

                <label class="flex items-center">
                    <input type="checkbox" id="settingEnemiesID" class="h-5 w-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500">
                    <span class="dark:text-white ml-2">Show Enemies ID</span>
                </label>
			</div>
		</div>
    </div>
</div>
<script>
    function returnLocalBool(item)
    {
        if (localStorage.getItem(item) == "true")
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //#region Classic enemies
    const settingNormalEnemy = document.getElementById("settingNormalEnemy");
    const settingMediumEnemy = document.getElementById("settingMediumEnemy");
    const settingEnchantedEnemy = document.getElementById("settingEnchantedEnemy");
    const settingMiniBossEnemy = document.getElementById("settingMiniBossEnemy");
    const settingBossEnemy = document.getElementById("settingBossEnemy");

    settingNormalEnemy.checked = returnLocalBool("settingNormalEnemy");
    settingMediumEnemy.checked = returnLocalBool("settingMediumEnemy");
    settingEnchantedEnemy.checked = returnLocalBool("settingEnchantedEnemy");
    settingMiniBossEnemy.checked = returnLocalBool("settingMiniBossEnemy");
    settingBossEnemy.checked = returnLocalBool("settingBossEnemy");

    settingNormalEnemy.addEventListener("click", () =>
    {
        localStorage.setItem("settingNormalEnemy", settingNormalEnemy.checked);
        HasToCheckCheckAllEnemies();
    });
    settingMediumEnemy.addEventListener("click", () => 
    {
        localStorage.setItem("settingMediumEnemy", settingMediumEnemy.checked);
        HasToCheckCheckAllEnemies();
    });
    settingEnchantedEnemy.addEventListener("click", () => 
    {
        localStorage.setItem("settingEnchantedEnemy", settingEnchantedEnemy.checked);
        HasToCheckCheckAllEnemies();
    });
    settingMiniBossEnemy.addEventListener("click", () => 
    {
        localStorage.setItem("settingMiniBossEnemy", settingMiniBossEnemy.checked);
        HasToCheckCheckAllEnemies();
    });
    settingBossEnemy.addEventListener("click", () => 
    {
        localStorage.setItem("settingBossEnemy", settingBossEnemy.checked);
        HasToCheckCheckAllEnemies();
    });

    let updatingAllEnemies = false;
    const settingAllEnemies = document.getElementById("settingAllEnemies");
    settingAllEnemies.checked = returnLocalBool("settingAllEnemies");
    settingAllEnemies.addEventListener("click", () =>
    {
        updatingAllEnemies = true;

        localStorage.setItem("settingAllEnemies", settingAllEnemies.checked);

        if (settingNormalEnemy.checked != settingAllEnemies.checked)
            settingNormalEnemy.click(true);
        if (settingMediumEnemy.checked != settingAllEnemies.checked)
            settingMediumEnemy.click(true);
        if (settingEnchantedEnemy.checked != settingAllEnemies.checked)
            settingEnchantedEnemy.click(true);
        if (settingMiniBossEnemy.checked != settingAllEnemies.checked)
            settingMiniBossEnemy.click(true);
        if (settingBossEnemy.checked != settingAllEnemies.checked)
            settingBossEnemy.click(true);

        updatingAllEnemies = false;
    });

    function HasToCheckCheckAllEnemies()
    {
        if (updatingAllEnemies) return;

        let hasToCheck = false;

        if (((settingNormalEnemy.checked && settingMediumEnemy.checked && settingEnchantedEnemy.checked && settingMiniBossEnemy.checked && settingBossEnemy.checked) && !settingAllEnemies.checked) ||
            ((!settingNormalEnemy.checked || !settingMediumEnemy.checked || !settingEnchantedEnemy.checked || !settingMiniBossEnemy.checked || !settingBossEnemy.checked) && settingAllEnemies.checked))
            hasToCheck = true;

        if (!hasToCheck) return;

        settingAllEnemies.checked = !settingAllEnemies.checked;
        localStorage.setItem("settingAllEnemies", settingAllEnemies.checked);
    }
    //#endregion

    //#region Other
    const settingAvaloneDrones = document.getElementById("settingAvaloneDrones");
    settingAvaloneDrones.checked = returnLocalBool("settingAvaloneDrones");
    settingAvaloneDrones.addEventListener("click", () => {localStorage.setItem("settingAvaloneDrones", settingAvaloneDrones.checked);});

    const settingShowUnmanagedEnemies = document.getElementById("settingShowUnmanagedEnemies");
    settingShowUnmanagedEnemies.checked = returnLocalBool("settingShowUnmanagedEnemies");
    settingShowUnmanagedEnemies.addEventListener("click", () => {localStorage.setItem("settingShowUnmanagedEnemies", settingShowUnmanagedEnemies.checked);});

    const settingShowEventEnemies = document.getElementById("settingShowEventEnemies");
    settingShowEventEnemies.checked = returnLocalBool("settingShowEventEnemies");
    settingShowEventEnemies.addEventListener("click", () => {localStorage.setItem("settingShowEventEnemies", settingShowEventEnemies.checked);});

    //#endregion

    //#region Mists
    const settingBossCrystalSpider = document.getElementById("settingBossCrystalSpider");
    const settingBossFairyDragon = document.getElementById("settingBossFairyDragon");
    const settingBossVeilWeaver = document.getElementById("settingBossVeilWeaver");
    const settingBossGriffin = document.getElementById("settingBossGriffin");

    settingBossCrystalSpider.checked = returnLocalBool("settingBossCrystalSpider");
    settingBossFairyDragon.checked = returnLocalBool("settingBossFairyDragon");
    settingBossVeilWeaver.checked = returnLocalBool("settingBossVeilWeaver");
    settingBossGriffin.checked = returnLocalBool("settingBossGriffin");

    settingBossCrystalSpider.addEventListener("click", () => {localStorage.setItem("settingBossCrystalSpider", settingBossCrystalSpider.checked);});
    settingBossFairyDragon.addEventListener("click", () => {localStorage.setItem("settingBossFairyDragon", settingBossFairyDragon.checked);});
    settingBossVeilWeaver.addEventListener("click", () => {localStorage.setItem("settingBossVeilWeaver", settingBossVeilWeaver.checked);});
    settingBossGriffin.addEventListener("click", () => {localStorage.setItem("settingBossGriffin", settingBossGriffin.checked);});
    //#endregion

    //#region Debug
    const settingEnemiesHP = document.getElementById("settingEnemiesHP");
    settingEnemiesHP.checked = returnLocalBool("settingEnemiesHP");
    settingEnemiesHP.addEventListener("click", () => {localStorage.setItem("settingEnemiesHP", settingEnemiesHP.checked);});

    const settingEnemiesID = document.getElementById("settingEnemiesID");
    settingEnemiesID.checked = returnLocalBool("settingEnemiesID");
    settingEnemiesID.addEventListener("click", () => {localStorage.setItem("settingEnemiesID", settingEnemiesID.checked);});
    //#endregion

</script>